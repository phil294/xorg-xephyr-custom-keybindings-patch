diff --unified --recursive --text xorg-server-1.20.5.orig/hw/kdrive/ephyr/ephyr.c xorg-server-1.20.5.new/hw/kdrive/ephyr/ephyr.c
--- xorg-server-1.20.5.orig/hw/kdrive/ephyr/ephyr.c	2019-05-30 20:27:34.000000000 +0200
+++ xorg-server-1.20.5.new/hw/kdrive/ephyr/ephyr.c	2019-08-08 20:56:06.163684000 +0200
@@ -60,6 +60,7 @@
 Bool EphyrWantGrayScale = 0;
 Bool EphyrWantResize = 0;
 Bool EphyrWantNoHostGrab = 0;
+int EphyrHostGrabKey = 0x0;
 
 Bool
 ephyrInitialize(KdCardInfo * card, EphyrPriv * priv)
@@ -656,9 +657,9 @@
     EPHYR_LOG("pScreen->myNum:%d\n", pScreen->myNum);
     hostx_set_screen_number(screen, pScreen->myNum);
     if (EphyrWantNoHostGrab) {
-        hostx_set_win_title(screen, "xephyr");
+        hostx_set_win_title(screen);
     } else {
-        hostx_set_win_title(screen, "(ctrl+shift grabs mouse and keyboard)");
+        hostx_set_win_title(screen);
     }
     pScreen->CreateColormap = ephyrCreateColormap;
 
@@ -1023,12 +1024,9 @@
         keysyms = xcb_key_symbols_alloc(conn);
 
     if (!EphyrWantNoHostGrab &&
-        (((xcb_key_symbols_get_keysym(keysyms, key->detail, 0) == XK_Shift_L
-          || xcb_key_symbols_get_keysym(keysyms, key->detail, 0) == XK_Shift_R)
-         && (key->state & XCB_MOD_MASK_CONTROL)) ||
-        ((xcb_key_symbols_get_keysym(keysyms, key->detail, 0) == XK_Control_L
-          || xcb_key_symbols_get_keysym(keysyms, key->detail, 0) == XK_Control_R)
-         && (key->state & XCB_MOD_MASK_SHIFT)))) {
+        key->state & XCB_MOD_MASK_CONTROL &&
+        xcb_key_symbols_get_keysym(keysyms, key->detail, 0) == EphyrHostGrabKey
+        ) {
         KdScreenInfo *screen = screen_from_window(key->event);
         EphyrScrPriv *scrpriv = screen->driver;
 
@@ -1036,8 +1034,7 @@
             xcb_ungrab_keyboard(conn, XCB_TIME_CURRENT_TIME);
             xcb_ungrab_pointer(conn, XCB_TIME_CURRENT_TIME);
             grabbed_screen = -1;
-            hostx_set_win_title(screen,
-                                "(ctrl+shift grabs mouse and keyboard)");
+            hostx_set_win_title(screen);
         }
         else if (!mod1_down) {
             /* Attempt grab */
@@ -1072,9 +1069,7 @@
                                             XCB_TIME_CURRENT_TIME);
                     } else {
                     grabbed_screen = scrpriv->mynum;
-                    hostx_set_win_title
-                        (screen,
-                         "(ctrl+shift releases mouse and keyboard)");
+                    hostx_set_win_title(screen);
                 }
             }
         }
diff --unified --recursive --text xorg-server-1.20.5.orig/hw/kdrive/ephyr/ephyrinit.c xorg-server-1.20.5.new/hw/kdrive/ephyr/ephyrinit.c
--- xorg-server-1.20.5.orig/hw/kdrive/ephyr/ephyrinit.c	2019-05-30 20:27:34.000000000 +0200
+++ xorg-server-1.20.5.new/hw/kdrive/ephyr/ephyrinit.c	2019-08-08 21:12:38.647061000 +0200
@@ -34,6 +34,7 @@
 extern Bool EphyrWantGrayScale;
 extern Bool EphyrWantResize;
 extern Bool EphyrWantNoHostGrab;
+extern int EphyrHostGrabKey;
 extern Bool kdHasPointer;
 extern Bool kdHasKbd;
 extern Bool ephyr_glamor, ephyr_glamor_gles2, ephyr_glamor_skip_present;
@@ -132,6 +133,7 @@
     ErrorF
         ("-title [title]       set the window title in the WM_NAME property\n");
     ErrorF("-no-host-grab        Disable grabbing the keyboard and mouse.\n");
+    ErrorF("-host-grab-key [k]   <CTRL> + <[k]> will be the combination to grab keyboard and mouse. [k] is a hex number from keysymdef.h .\n");
     ErrorF("\n");
 }
 
@@ -336,6 +338,16 @@
         EphyrWantNoHostGrab = 1;
         return 1;
     }
+    else if (!strcmp(argv[i], "-host-grab-key")) {
+        if (i + 1 < argc && argv[i + 1][0] != '-') {
+            EphyrHostGrabKey = strtol(argv[i + 1], NULL, 16);
+            return 2;
+        }
+        else {
+            UseMsg();
+            return 0;
+        }
+    }
     else if (!strcmp(argv[i], "-sharevts") ||
              !strcmp(argv[i], "-novtswitch")) {
         return 1;
diff --unified --recursive --text xorg-server-1.20.5.orig/hw/kdrive/ephyr/hostx.c xorg-server-1.20.5.new/hw/kdrive/ephyr/hostx.c
--- xorg-server-1.20.5.orig/hw/kdrive/ephyr/hostx.c	2019-05-30 20:27:34.000000000 +0200
+++ xorg-server-1.20.5.new/hw/kdrive/ephyr/hostx.c	2019-08-08 21:12:57.047062000 +0200
@@ -93,6 +93,8 @@
 
 extern Bool EphyrWantResize;
 
+extern int EphyrHostGrabKey;
+
 char *ephyrResName = NULL;
 int ephyrResNameFromCmd = 0;
 char *ephyrTitle = NULL;
@@ -162,12 +164,12 @@
 
     if (scrpriv) {
         scrpriv->mynum = number;
-        hostx_set_win_title(screen, "");
+        hostx_set_win_title(screen);
     }
 }
 
 void
-hostx_set_win_title(KdScreenInfo *screen, const char *extra_text)
+hostx_set_win_title(KdScreenInfo *screen)
 {
     EphyrScrPriv *scrpriv = screen->driver;
 
@@ -186,9 +188,9 @@
         char buf[BUF_LEN + 1];
 
         memset(buf, 0, BUF_LEN + 1);
-        snprintf(buf, BUF_LEN, "Xephyr on %s.%d %s",
+        snprintf(buf, BUF_LEN, "Xephyr on %s.%d (Toggle mouse and keyboard with <CTRL> + <%x>)",
                  HostX.server_dpy_name ? HostX.server_dpy_name : ":0",
-                 scrpriv->mynum, (extra_text != NULL) ? extra_text : "");
+                 scrpriv->mynum, EphyrHostGrabKey);
 
         xcb_icccm_set_wm_name(HostX.conn,
                               scrpriv->win,
@@ -638,8 +640,7 @@
                               attr_mask,
                               attrs);
 
-            hostx_set_win_title(screen,
-                                "(ctrl+shift grabs mouse and keyboard)");
+            hostx_set_win_title(screen);
 
             if (HostX.use_fullscreen) {
                 scrpriv->win_width  = xscreen->width_in_pixels;
diff --unified --recursive --text xorg-server-1.20.5.orig/hw/kdrive/ephyr/hostx.h xorg-server-1.20.5.new/hw/kdrive/ephyr/hostx.h
--- xorg-server-1.20.5.orig/hw/kdrive/ephyr/hostx.h	2019-05-30 20:27:34.000000000 +0200
+++ xorg-server-1.20.5.new/hw/kdrive/ephyr/hostx.h	2019-08-08 20:47:35.650328000 +0200
@@ -120,7 +120,7 @@
 hostx_set_screen_number(KdScreenInfo *screen, int number);
 
 void
-hostx_set_win_title(KdScreenInfo *screen, const char *extra_text);
+hostx_set_win_title(KdScreenInfo *screen);
 
 int
  hostx_get_depth(void);
